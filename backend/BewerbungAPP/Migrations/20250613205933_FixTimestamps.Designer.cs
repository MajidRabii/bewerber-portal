// <auto-generated />
using System;
using BewerbungAPP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BewerbungAPP.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250613205933_FixTimestamps")]
    partial class FixTimestamps
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BewerbungAPP.Models.Abschlussart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<bool>("Aktiv")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<short>("Code")
                        .HasColumnType("smallint");

                    b.Property<string>("Name_DE")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name_EN")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("abschlussart", (string)null);
                });

            modelBuilder.Entity("BewerbungAPP.Models.Beruf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<bool>("Aktiv")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<short>("Code")
                        .HasColumnType("smallint");

                    b.Property<string>("Name_DE")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name_EN")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("beruf", (string)null);
                });

            modelBuilder.Entity("BewerbungAPP.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<char>("Anrede")
                        .HasColumnType("char(1)");

                    b.Property<bool>("Bild")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Bild_Datei")
                        .HasColumnType("bytea");

                    b.Property<string>("Bild_Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Bild_Type")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Erstellen_Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<int>("Geburtsort_Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Geburtstag")
                        .HasColumnType("date");

                    b.Property<string>("Handynummer")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Laendercode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Nachname")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("User_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Vorname")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Zuletzt_Aktiv_Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Geburtsort_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("person", (string)null);
                });

            modelBuilder.Entity("BewerbungAPP.Models.Profil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Abschlussart_Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Anerkennung")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Ankunftsdatum")
                        .HasColumnType("date");

                    b.Property<bool>("Arbeitserlaubnis")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("Auto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("Beruf1_Id")
                        .HasColumnType("integer");

                    b.Property<int?>("Beruf2_Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Bewerbung")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Bewerbung_Datei")
                        .HasColumnType("bytea");

                    b.Property<string>("Bewerbung_Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Bewerbung_Type")
                        .HasColumnType("varchar(50)");

                    b.Property<short>("Deutsch_Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Einrichtung")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<short>("Einsatzwunsch_Id")
                        .HasColumnType("smallint");

                    b.Property<short>("Englisch_Id")
                        .HasColumnType("smallint");

                    b.Property<short>("Erfahrung1")
                        .HasColumnType("smallint");

                    b.Property<short?>("Erfahrung2")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("Erstellen_Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<short>("Fuehrerschein_Id")
                        .HasColumnType("smallint");

                    b.Property<bool>("Lebenslauf")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Lebenslauf_Datei")
                        .HasColumnType("bytea");

                    b.Property<string>("Lebenslauf_Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Lebenslauf_Type")
                        .HasColumnType("varchar(50)");

                    b.Property<short>("Niveau_Id")
                        .HasColumnType("smallint");

                    b.Property<short>("Persisch_Id")
                        .HasColumnType("smallint");

                    b.Property<int>("Person_Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Sprachzertifikate")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Sprachzertifikate_Datei")
                        .HasColumnType("bytea");

                    b.Property<string>("Sprachzertifikate_Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Sprachzertifikate_Type")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("Studiengang_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Studienort_Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Studiumzertifikate")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Studiumzertifikate_Datei")
                        .HasColumnType("bytea");

                    b.Property<string>("Studiumzertifikate_Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Studiumzertifikate_Type")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("User_Id")
                        .HasColumnType("integer");

                    b.Property<short>("Zertifikate_Id")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("Zuletzt_Aktiv_Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("Abschlussart_Id");

                    b.HasIndex("Beruf1_Id");

                    b.HasIndex("Beruf2_Id");

                    b.HasIndex("Person_Id");

                    b.HasIndex("Studiengang_Id");

                    b.HasIndex("Studienort_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("profil", (string)null);
                });

            modelBuilder.Entity("BewerbungAPP.Models.Stadt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<bool>("Aktiv")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Bundesland")
                        .HasColumnType("varchar(100)");

                    b.Property<short>("Code")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("stadt", (string)null);
                });

            modelBuilder.Entity("BewerbungAPP.Models.Studiengang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<bool>("Aktiv")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<short>("Code")
                        .HasColumnType("smallint");

                    b.Property<string>("Name_DE")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name_EN")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("studiengang", (string)null);
                });

            modelBuilder.Entity("BewerbungAPP.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<DateTime>("Last_Active_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("last_active_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("user")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("BewerbungAPP.ViewModels.BewerberProfilViewModel", b =>
                {
                    b.Property<int>("Abschlussart_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Abschlussart_Name")
                        .HasColumnType("text");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Anerkennung")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Ankunftsdatum")
                        .HasColumnType("timestamptz");

                    b.Property<char>("Anrede")
                        .HasColumnType("character(1)");

                    b.Property<bool>("Arbeitserlaubnis")
                        .HasColumnType("boolean");

                    b.Property<bool>("Auto")
                        .HasColumnType("boolean");

                    b.Property<int>("Beruf1_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Beruf1_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Beruf2_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Beruf2_Name")
                        .HasColumnType("text");

                    b.Property<bool>("Bewerbung")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Bewerbung_Datei")
                        .HasColumnType("bytea");

                    b.Property<string>("Bewerbung_Name")
                        .HasColumnType("text");

                    b.Property<string>("Bewerbung_Type")
                        .HasColumnType("text");

                    b.Property<bool>("Bild")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Bild_Datei")
                        .HasColumnType("bytea");

                    b.Property<string>("Bild_Name")
                        .HasColumnType("text");

                    b.Property<string>("Bild_Type")
                        .HasColumnType("text");

                    b.Property<short>("Deutsch_Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Deutsch_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Einrichtung")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Einsatzwunsch_Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Einsatzwunsch_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Englisch_Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Englisch_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Erfahrung1")
                        .HasColumnType("smallint");

                    b.Property<short?>("Erfahrung2")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Erstellen_Date")
                        .HasColumnType("timestamptz");

                    b.Property<short>("Fuehrerschein_Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Fuehrerschein_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Geburtsort_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Geburtsort_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Geburtstag")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Handynummer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Laendercode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Lebenslauf")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Lebenslauf_Datei")
                        .HasColumnType("bytea");

                    b.Property<string>("Lebenslauf_Name")
                        .HasColumnType("text");

                    b.Property<string>("Lebenslauf_Type")
                        .HasColumnType("text");

                    b.Property<string>("Nachname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Niveau_Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Niveau_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Persisch_Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Persisch_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("PersonId");

                    b.Property<int>("Person_Id")
                        .HasColumnType("integer");

                    b.Property<int>("ProfilId")
                        .HasColumnType("integer");

                    b.Property<bool>("Sprachzertifikate")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Sprachzertifikate_Datei")
                        .HasColumnType("bytea");

                    b.Property<string>("Sprachzertifikate_Name")
                        .HasColumnType("text");

                    b.Property<string>("Sprachzertifikate_Type")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<int>("Studiengang_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Studiengang_Name")
                        .HasColumnType("text");

                    b.Property<int>("Studienort_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Studienort_Name")
                        .HasColumnType("text");

                    b.Property<bool>("Studiumzertifikate")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Studiumzertifikate_Datei")
                        .HasColumnType("bytea");

                    b.Property<string>("Studiumzertifikate_Name")
                        .HasColumnType("text");

                    b.Property<string>("Studiumzertifikate_Type")
                        .HasColumnType("text");

                    b.Property<int>("User_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Vorname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Zertifikate_Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Zertifikate_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Zuletzt_Aktiv_Date")
                        .HasColumnType("timestamptz");

                    b.ToTable((string)null);

                    b.ToView("Bewerberprofil", (string)null);
                });

            modelBuilder.Entity("BewerbungAPP.Models.Person", b =>
                {
                    b.HasOne("BewerbungAPP.Models.Stadt", "Geburtsort")
                        .WithMany()
                        .HasForeignKey("Geburtsort_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BewerbungAPP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Geburtsort");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BewerbungAPP.Models.Profil", b =>
                {
                    b.HasOne("BewerbungAPP.Models.Abschlussart", "Abschlussart")
                        .WithMany()
                        .HasForeignKey("Abschlussart_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BewerbungAPP.Models.Beruf", "Beruf1")
                        .WithMany()
                        .HasForeignKey("Beruf1_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BewerbungAPP.Models.Beruf", "Beruf2")
                        .WithMany()
                        .HasForeignKey("Beruf2_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BewerbungAPP.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("Person_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BewerbungAPP.Models.Studiengang", "Studiengang")
                        .WithMany()
                        .HasForeignKey("Studiengang_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BewerbungAPP.Models.Stadt", "Studienort")
                        .WithMany()
                        .HasForeignKey("Studienort_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BewerbungAPP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Abschlussart");

                    b.Navigation("Beruf1");

                    b.Navigation("Beruf2");

                    b.Navigation("Person");

                    b.Navigation("Studiengang");

                    b.Navigation("Studienort");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
